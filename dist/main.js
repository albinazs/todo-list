(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>A});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat&display=swap);"]),a.push([n.id,'* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n}\n\n.projectlist li p{\n    font-size: 1rem;\n  }\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;EACV,qCAAqC;EACrC,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,cAAc;EACd,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;AACf;;AAEA;IACI,eAAe;EACjB;;AAEF;EACE,yBAAyB;AAC3B;;AAEA;;;CAGC;;AAED;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Montserrat&display=swap");\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n}\n\n.projectlist li p{\n    font-size: 1rem;\n  }\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n'],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(a[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],A=0;A<n.length;A++){var s=n[A],c=o.base?s[0]+o.base:s[0],d=i[c]||0,l="".concat(c," ").concat(d);i[c]=d+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=r(u,o);o.byIndex=A,e.splice(A,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var A=t(i[a]);e[A].references--}for(var s=o(n,r),c=0;c<i.length;c++){var d=t(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var o={};(()=>{t.d(o,{m:()=>y});var n=t(379),e=t.n(n),r=t(795),i=t.n(r),a=t(569),A=t.n(a),s=t(565),c=t.n(s),d=t(216),l=t.n(d),p=t(589),u=t.n(p),f=t(426),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=A().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),e()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const E=(n,e,t)=>{const o=document.createElement(n);return e&&o.classList.add(e),t&&(o.textContent=t),o},C=document.querySelector(".todos"),h=()=>{y.projects.forEach((n=>{n.todoList.forEach((n=>{const e=E("li",null,null),t=E("input",null,null);t.setAttribute("type","checkbox");const o=E("p",null,"".concat(n.description)),r=E("p",null,"".concat(n.dueDate)),i=E("button","material-symbols-outlined","edit"),a=E("button","material-symbols-outlined","delete");e.appendChild(t),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(a),C.appendChild(e),console.log("hello")}))}))},g=document.querySelector(".projectlist");document.querySelector("#inbox").addEventListener("click",(()=>{C.innerHTML="",h()}));class b{constructor(n,e){this.description=n,this.dueDate=e,this.isComplete=!1}editTodo(n,e){this.description=n,this.dueDate=e}completeTodo(){this.isComplete=!0}}class B{constructor(n){this.description=n,this.todoList=[]}editProject(n){this.description=n}addTodo(n){this.todoList.push(n)}}const y={projects:[],addProject(n){this.projects.push(n)}},v=new b("to clean room","2pm");v.editTodo("to mop","4pm");const x=new b("to run","5.09"),j=new B("demo"),w=new B("demo2");j.addTodo(v),w.addTodo(v),w.addTodo(x),y.addProject(j),y.addProject(w),h(),y.projects.forEach((n=>{const e=E("li",null,null),t=E("span","material-symbols-outlined","list"),o=E("p",null,"".concat(n.description));e.appendChild(t),e.appendChild(o),g.appendChild(e)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,