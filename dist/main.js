(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat&display=swap);"]),a.push([n.id,'* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: rgb(181, 185, 181);\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n\n.check {\n  text-decoration: line-through;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;EACV,qCAAqC;EACrC,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,cAAc;EACd,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,UAAU;EACV,WAAW;EACX,iBAAiB;EACjB,yBAAyB;AAC3B;;AAEA;;;CAGC;;AAED;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6BAA6B;AAC/B",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Montserrat&display=swap");\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: rgb(181, 185, 181);\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n\n.check {\n  text-decoration: line-through;\n}\n'],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],s=0;s<n.length;s++){var l=n[s],c=o.base?l[0]+o.base:l[0],d=i[c]||0,A="".concat(c," ").concat(d);i[c]=d+1;var p=t(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=r(u,o);o.byIndex=s,e.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var l=o(n,r),c=0;c<i.length;c++){var d=t(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var o={};(()=>{t.d(o,{IK:()=>z,PK:()=>I,mK:()=>P});var n=t(379),e=t.n(n),r=t(795),i=t.n(r),a=t(569),s=t.n(a),l=t(565),c=t.n(l),d=t(216),A=t.n(d),p=t(589),u=t.n(p),f=t(426),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=A(),e()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const h=document.querySelector(".todos"),C=document.querySelector(".projectlist"),E=document.querySelector("#inbox"),g=document.querySelector(".addproject"),b=(n,e,t,o,r,i)=>{const a=document.createElement(n);return e&&a.classList.add(e),t&&(a.textContent=t),o&&a.setAttribute("type",o),r&&(a.dataset.projectIndex=r),i&&(a.dataset.todoIndex=i),a},B=(n,e,t)=>{const o=b("li",null,null),r=b("input",null,null,"checkbox"),i=b("p",null,"".concat(n.description)),a=b("p",null,"".concat(n.dueDate)),s=b("button","material-symbols-outlined","edit",null,null,"".concat(e)),l=b("button","material-symbols-outlined","delete",null,null,"".concat(e));r.addEventListener("change",(()=>{r.checked?(i.classList.add("check"),a.classList.add("check"),n.isComplete=!0,console.log(n.isComplete)):(i.classList.remove("check"),a.classList.remove("check"),n.isComplete=!1,console.log(n.isComplete))})),s.dataset.projectIndex=t,s.addEventListener("click",(n=>{n.stopPropagation(),console.log("yap"),y(n),x(),T()})),l.dataset.projectIndex=t,l.addEventListener("click",(n=>{n.stopPropagation(),P.projects[n.target.dataset.projectIndex].removeTodo(n.target.dataset.todoIndex),x(),T()})),o.appendChild(r),o.appendChild(i),o.appendChild(a),o.appendChild(s),o.appendChild(l),h.appendChild(o)},v=n=>{const e=b("button",null,"+Add task",null,"".concat(n));e.addEventListener("click",(n=>y(n))),h.appendChild(e)},y=n=>{console.log(h.lastChild),h.removeChild(h.lastChild);const e=b("form",null,null),t=b("input",null,null,"text"),o=b("input",null,null,"text"),r=b("select",null,null),i=b("button",null,"Add","submit"),a=b("button",null,"Cancel","reset");if(t.required=!0,t.setAttribute("placeholder","Task description"),r.setAttribute("name","projects"),a.addEventListener("click",(()=>{h.removeChild(h.lastChild),v(n.target.dataset.projectIndex)})),"null"==n.target.dataset.projectIndex)P.projects.forEach((n=>{const e=b("option",null,"".concat(n.description));e.setAttribute("value","".concat(n.description)),r.appendChild(e)})),console.log("YYYEP"),e.addEventListener("submit",(n=>{n.preventDefault(),console.log(P);const e=P.projects.findIndex((n=>n.description==="".concat(r.value))),i=new I(t.value,o.value);P.projects[e].addTodo(i),console.log(P),k(e)})),e.appendChild(t),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(a),h.appendChild(e);else{const r=n.target.dataset.projectIndex;console.log("test"),e.addEventListener("submit",(n=>{n.preventDefault();const e=new I(t.value,o.value);P.projects[r].addTodo(e),console.log(P),k(r)})),e.appendChild(t),e.appendChild(o),e.appendChild(i),e.appendChild(a),h.appendChild(e)}},x=()=>{h.innerHTML=""},j=()=>{P.projects.forEach(((n,e)=>{const t=b("li",null,null),o=b("span","material-symbols-outlined","list"),r=b("p",null,"".concat(n.description)),i=b("button","material-symbols-outlined","delete",null,"".concat(e));t.appendChild(o),t.appendChild(r),t.appendChild(i),t.addEventListener("click",(()=>{k(e)})),i.addEventListener("click",(n=>{w(n),x(),T()})),C.appendChild(t)}))},k=n=>{x(),P.projects[n].todoList.forEach(((n,e)=>{B(n,e)})),v(n)},w=n=>{n.stopPropagation(),console.log("yes");const e=n.target.dataset.projectIndex;P.removeProject(e),L(),j(),console.log(P)},L=()=>{C.innerHTML=""},T=()=>{P.projects.forEach(((n,e)=>{n.todoList.forEach(((n,t)=>{B(n,t,e)}))})),v(null)};E.addEventListener("click",(()=>{x(),T()})),g.addEventListener("click",(()=>(()=>{console.log("ok");const n=b("form",null,null),e=b("input",null,null,"text"),t=b("button",null,"Add","submit"),o=b("button",null,"Cancel","reset");e.required=!0,n.appendChild(e),n.appendChild(t),n.appendChild(o),C.appendChild(n),n.addEventListener("submit",(n=>{n.preventDefault();const t=new z(e.value);P.addProject(t),console.log(P),L(),j()}))})()));class I{constructor(n,e,t){this.description=n,this.dueDate=e,this.project=t,this.isComplete=!1}editTodo(n,e){this.description=n,this.dueDate=e}completeTodo(){this.isComplete=!1}}class z{constructor(n){this.description=n,this.todoList=[]}editProject(n){this.description=n}addTodo(n){this.todoList.push(n)}removeTodo(n){this.todoList.splice(n,1)}}const P={projects:[],addProject(n){this.projects.push(n)},removeProject(n){console.log(n),this.projects.splice(n,1)}},M=new z("demo"),S=new z("demo2"),D=new I("to clean room","2pm","demo"),q=new I("to run","5.09");M.addTodo(D),S.addTodo(D),S.addTodo(q),P.addProject(M),P.addProject(S),T(),j()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,