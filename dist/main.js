(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat&display=swap);"]),a.push([n.id,'* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: rgb(181, 185, 181);\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n\n.check {\n  text-decoration: line-through;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;EACV,qCAAqC;EACrC,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,cAAc;EACd,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,UAAU;EACV,WAAW;EACX,iBAAiB;EACjB,yBAAyB;AAC3B;;AAEA;;;CAGC;;AAED;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6BAA6B;AAC/B",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Montserrat&display=swap");\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: rgb(181, 185, 181);\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n\n.check {\n  text-decoration: line-through;\n}\n'],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],d=o.base?s[0]+o.base:s[0],A=i[d]||0,l="".concat(d," ").concat(A);i[d]=A+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=r(u,o);o.byIndex=c,e.splice(c,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=o(n,r),d=0;d<i.length;d++){var A=t(i[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var o={};(()=>{t.d(o,{IK:()=>I,PK:()=>P,mK:()=>N});var n=t(379),e=t.n(n),r=t(795),i=t.n(r),a=t(569),c=t.n(a),s=t(565),d=t.n(s),A=t(216),l=t.n(A),p=t(589),u=t.n(p),f=t(426),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=c().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),e()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const E=document.querySelector(".todos"),h=document.querySelector(".projectlist"),C=document.querySelector("#inbox"),y=document.querySelector("#complete"),g=document.querySelector(".addproject"),v=document.querySelector("#project-template"),b=document.querySelector("#todo-template"),B=document.querySelector("#add-project-template"),x=document.querySelector("#add-todo-template"),j=(n,e,t)=>{const o=document.importNode(b.content,!0),r=o.querySelector("li"),i=o.querySelector("input"),a=o.querySelector("p:first-of-type"),c=o.querySelector("p:last-of-type"),s=o.querySelector("button:first-of-type"),d=o.querySelector("button:last-of-type");a.textContent="".concat(n.description),c.textContent="".concat(n.dueDate),s.dataset.todoIndex="".concat(e),d.dataset.todoIndex="".concat(e),!0===n.isComplete&&(i.checked=!0,a.classList.add("check"),c.classList.add("check")),i.addEventListener("change",(()=>{i.checked?(a.classList.add("check"),c.classList.add("check"),n.isComplete=!0):(a.classList.remove("check"),c.classList.remove("check"),n.isComplete=!1)})),s.dataset.projectIndex=t,s.addEventListener("click",(n=>{n.stopPropagation(),L(t,e)})),d.dataset.projectIndex=t,d.addEventListener("click",(n=>{n.stopPropagation(),k(t,e)})),E.appendChild(r)},k=(n,e)=>{N.projects[n].removeTodo(e),w(),M()},S=n=>{const e=document.createElement("button");e.textContent="+Add task",e.addEventListener("click",(()=>L(n))),E.appendChild(e)},L=(n,e)=>{E.removeChild(E.lastChild);const t=document.importNode(x.content,!0),o=t.querySelector("form"),r=t.querySelector("input[type=text]"),i=t.querySelector("input[type=date]"),a=t.querySelector("select"),c=t.querySelector("button[type=submit]");if(t.querySelector("button[type=reset]").addEventListener("click",(()=>{E.removeChild(E.lastChild),S(n)})),e||0===e){const t=N.projects[n].todoList[e];return r.value=t.description,i.value=t.dueDate,o.addEventListener("submit",(e=>{e.preventDefault(),t.editTodo(r.value,i.value),T(n)})),a.style.display="none",c.textContent="Edit",void E.appendChild(o)}null===n?(N.projects.forEach((n=>{const e=document.createElement("option");e.textContent="".concat(n.description),e.value="".concat(n.description),a.appendChild(e)})),o.addEventListener("submit",(e=>{e.preventDefault(),n=N.projects.findIndex((n=>n.description==="".concat(a.value)));const t=new P(r.value,i.value);N.projects[n].addTodo(t),T(n)})),E.appendChild(o)):(o.addEventListener("submit",(e=>{e.preventDefault();const t=new P(r.value,i.value);N.projects[n].addTodo(t),T(n)})),a.style.display="none",E.appendChild(o))},w=()=>{E.innerHTML=""},q=()=>{N.projects.forEach(((n,e)=>{const t=document.importNode(v.content,!0),o=t.querySelector("li"),r=t.querySelector("p"),i=t.querySelector("button");o.addEventListener("click",(()=>{T(e)})),r.textContent="".concat(n.description),i.addEventListener("click",(n=>{z(n)})),h.appendChild(o)}))},T=n=>{w(),N.projects[n].todoList.forEach(((e,t)=>{j(e,t,n)})),S(n)},z=n=>{n.stopPropagation();const e=n.target.dataset.projectIndex;N.removeProject(e),D(),q(),w(),M()},D=()=>{h.innerHTML=""},M=()=>{N.projects.forEach(((n,e)=>{n.todoList.forEach(((n,t)=>{j(n,t,e)}))})),S(null)};C.addEventListener("click",(()=>{w(),M()})),y.addEventListener("click",(()=>{w(),N.projects.forEach(((n,e)=>{n.todoList.filter((n=>!0===n.isComplete)).forEach(((n,t)=>{j(n,t,e),document.querySelector("input[type=checkbox]")}))}))})),g.addEventListener("click",(()=>(()=>{const n=document.importNode(B.content,!0),e=n.querySelector("form"),t=n.querySelector("input"),o=n.querySelector('button[type="reset"]');h.appendChild(e),e.addEventListener("submit",(n=>{n.preventDefault();const e=new I(t.value);N.addProject(e),D(),q()})),o.addEventListener("click",(()=>{h.removeChild(h.lastChild)}))})()));class P{constructor(n,e){this.description=n,this.dueDate=e,this.isComplete=!1}editTodo(n,e){this.description=n,this.dueDate=e}completeTodo(){this.isComplete=!1}}class I{constructor(n){this.description=n,this.todoList=[]}editProject(n){this.description=n}addTodo(n){this.todoList.push(n)}removeTodo(n){this.todoList.splice(n,1)}}const N={projects:[],addProject(n){this.projects.push(n)},removeProject(n){this.projects.splice(n,1)}},U=new I("Demo project"),W=new I("Demo project2"),R=new P("to clean bath","5pm"),Z=new P("to run","5.09"),O=new P("to clean room","2pm");U.addTodo(R),W.addTodo(O),W.addTodo(Z),N.addProject(U),N.addProject(W),M(),q()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,