(()=>{"use strict";var t={402:(t,e,n)=>{n.d(e,{Z:()=>d});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat&display=swap);"]),i.push([t.id,':root {\n  --light-grey-color: #fafafa;\n  --dark-grey-color: rgb(181, 185, 181);\n  --orange-color: #ff9000;\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\n.toggle-sidebar {\n  font-size: 2.5rem;\n  margin-right: 10px;\n  cursor: pointer;\n  display: none;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projects-div {\n  margin: 10px 0px;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.active {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: var(--dark-grey-color);\n}\n\naside form input[type="text"] {\n  width: 100%;\n  border: 1px solid var(--dark-grey-color);\n  border-radius: 5px;\n  padding: 5px;\n}\n\n.orange {\n  color: orange;\n}\n\naside li.add:hover {\n  background-color: var(--light-grey-color);\n  color: var(--orange-color);\n}\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main h4 {\n  font-size: 1.3rem;\n  margin-bottom: 10px;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n\n.check {\n  text-decoration: line-through;\n}\n\n.main li.add:hover {\n  background-color: #ffffff;\n  color: var(--orange-color);\n}\n\n.main form {\n  width: 100%;\n}\n\n.main form #input {\n  border: 1px solid var(--dark-grey-color);\n  border-radius: 5px;\n  padding: 5px;\n}\n\n.main form input[type="text"] {\n  width: 100%;\n  border: none;\n  padding: 10px 0px;\n}\n\n.main form input[type="date"],\n.main form input[type="select"] {\n  border: 1px solid var(--dark-grey-color);\n}\n\ninput:focus {\n  outline: none;\n}\n\n.main form .input-buttons,\naside form .input-buttons {\n  display: flex;\n  gap: 20px;\n}\n\n.main form button,\naside form button {\n  text-align: center;\n  width: auto;\n  padding: 5px 10px;\n  border-radius: 5px;\n  margin-top: 10px;\n}\n\n.main form button:first-of-type,\naside form button:first-of-type {\n  color: white;\n  background-color: var(--orange-color);\n}\n\n.main form button:last-of-type,\naside form button:last-of-type {\n  background-color: var(--light-grey-color);\n}\n\n.aside-show {\n  display: block;\n}\n\n@media (max-width: 960px) {\n  .toggle-sidebar {\n    display: block !important;\n  }\n\n  body {\n    display: flex;\n    flex-direction: column;\n  }\n\n  aside {\n    display: none;\n  }\n}\n',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAEA;EACE,2BAA2B;EAC3B,qCAAqC;EACrC,uBAAuB;AACzB;;AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;EACV,qCAAqC;EACrC,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,eAAe;EACf,aAAa;AACf;;AAEA;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,UAAU;EACV,WAAW;EACX,iBAAiB;EACjB,6BAA6B;AAC/B;;AAEA;EACE,WAAW;EACX,wCAAwC;EACxC,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,yCAAyC;EACzC,0BAA0B;AAC5B;;AAEA;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,yBAAyB;EACzB,0BAA0B;AAC5B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,wCAAwC;EACxC,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;AACnB;;AAEA;;EAEE,wCAAwC;AAC1C;;AAEA;EACE,aAAa;AACf;;AAEA;;EAEE,aAAa;EACb,SAAS;AACX;;AAEA;;EAEE,kBAAkB;EAClB,WAAW;EACX,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;;EAEE,YAAY;EACZ,qCAAqC;AACvC;;AAEA;;EAEE,yCAAyC;AAC3C;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE;IACE,yBAAyB;EAC3B;;EAEA;IACE,aAAa;IACb,sBAAsB;EACxB;;EAEA;IACE,aAAa;EACf;AACF",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Montserrat&display=swap");\n\n:root {\n  --light-grey-color: #fafafa;\n  --dark-grey-color: rgb(181, 185, 181);\n  --orange-color: #ff9000;\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\n.toggle-sidebar {\n  font-size: 2.5rem;\n  margin-right: 10px;\n  cursor: pointer;\n  display: none;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projects-div {\n  margin: 10px 0px;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.active {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: var(--dark-grey-color);\n}\n\naside form input[type="text"] {\n  width: 100%;\n  border: 1px solid var(--dark-grey-color);\n  border-radius: 5px;\n  padding: 5px;\n}\n\n.orange {\n  color: orange;\n}\n\naside li.add:hover {\n  background-color: var(--light-grey-color);\n  color: var(--orange-color);\n}\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main h4 {\n  font-size: 1.3rem;\n  margin-bottom: 10px;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n\n.check {\n  text-decoration: line-through;\n}\n\n.main li.add:hover {\n  background-color: #ffffff;\n  color: var(--orange-color);\n}\n\n.main form {\n  width: 100%;\n}\n\n.main form #input {\n  border: 1px solid var(--dark-grey-color);\n  border-radius: 5px;\n  padding: 5px;\n}\n\n.main form input[type="text"] {\n  width: 100%;\n  border: none;\n  padding: 10px 0px;\n}\n\n.main form input[type="date"],\n.main form input[type="select"] {\n  border: 1px solid var(--dark-grey-color);\n}\n\ninput:focus {\n  outline: none;\n}\n\n.main form .input-buttons,\naside form .input-buttons {\n  display: flex;\n  gap: 20px;\n}\n\n.main form button,\naside form button {\n  text-align: center;\n  width: auto;\n  padding: 5px 10px;\n  border-radius: 5px;\n  margin-top: 10px;\n}\n\n.main form button:first-of-type,\naside form button:first-of-type {\n  color: white;\n  background-color: var(--orange-color);\n}\n\n.main form button:last-of-type,\naside form button:last-of-type {\n  background-color: var(--light-grey-color);\n}\n\n.aside-show {\n  display: block;\n}\n\n@media (max-width: 960px) {\n  .toggle-sidebar {\n    display: block !important;\n  }\n\n  body {\n    display: flex;\n    flex-direction: column;\n  }\n\n  aside {\n    display: none;\n  }\n}\n'],sourceRoot:""}]);const d=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],d=0;d<t.length;d++){var s=t[d],c=r.base?s[0]+r.base:s[0],u=a[c]||0,l="".concat(c," ").concat(u);a[c]=u+1;var f=n(l),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)e[f].references++,e[f].updater(m);else{var A=o(m,r);r.byIndex=d,e.splice(d,0,{identifier:l,updater:A,references:1})}i.push(l)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var d=n(a[i]);e[d].references--}for(var s=r(t,o),c=0;c<a.length;c++){var u=n(a[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=s}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),a=n(569),i=n.n(a),d=n(565),s=n.n(d),c=n(216),u=n.n(c),l=n(589),f=n.n(l),m=n(402),A={};function p(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function g(t){p(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function h(t){p(1,arguments);var e=g(t);return e.setHours(0,0,0,0),e}function v(t,e){p(2,arguments);var n=h(t),r=h(e);return n.getTime()===r.getTime()}function y(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}A.styleTagTransform=f(),A.setAttributes=s(),A.insert=i().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=u(),e()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;var b={};function C(){return b}function w(t,e){var n,r,o,a,i,d,s,c;p(1,arguments);var u=C(),l=y(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=g(t),m=f.getDay(),A=(m<l?7:0)+m-l;return f.setDate(f.getDate()-A),f.setHours(0,0,0,0),f}function E(t,e,n){p(2,arguments);var r=w(t,n),o=w(e,n);return r.getTime()===o.getTime()}class x{static saveTodoApp(){localStorage.setItem("todoApp",JSON.stringify(k))}static getTodoApp(){const t=Object.assign(Object.create(k),JSON.parse(localStorage.getItem("todoApp")));return t.setProjects(t.getProjects().map((t=>Object.assign(new B,t)))),t.getProjects().forEach((t=>t.setTodos(t.getTodos().map((t=>Object.assign(new T,t)))))),t}static addProject(t){k.addProject(t),x.saveTodoApp()}static removeProject(t){k.removeProject(t),x.saveTodoApp()}static addTodo(t,e){k.projects[t].addTodo(e),x.saveTodoApp()}static removeTodo(t,e){k.projects[t].removeTodo(e),x.saveTodoApp()}static editTodo(t,e,n,r){k.projects[t].todoList[e].editTodo(n,r),x.saveTodoApp()}}class T{constructor(t,e){this.description=t,this.dueDate=e,this.isComplete=!1}editTodo(t,e){this.description=t,this.dueDate=e}completeTodo(){this.isComplete=!1}getDateFormatted(){const t=this.dueDate.split("/")[0],e=this.dueDate.split("/")[1],n=this.dueDate.split("/")[2];return"".concat(e,"/").concat(t,"/").concat(n)}}class B{constructor(t){this.description=t,this.todoList=[]}getDescription(){return this.description}editProject(t){this.description=t}setTodos(t){this.todoList=t}getTodos(){return this.todoList}addTodo(t){this.todoList.push(t)}removeTodo(t){this.todoList.splice(t,1)}getTodayTodos(){return this.todoList.filter((t=>function(t){return p(1,arguments),v(t,Date.now())}(g(new Date(t.getDateFormatted())))))}getThisWeekTodos(){return this.todoList.filter((t=>function(t,e){return p(1,arguments),E(t,Date.now(),e)}(g(new Date(t.getDateFormatted())))))}}let k={projects:[],setProjects(t){this.projects=t},getProjects(){return this.projects},contains(t){return this.projects.some((e=>e.getDescription()===t))},getIndex(t){return this.projects.findIndex((e=>e.getDescription()===t))},addProject(t){this.projects.push(t)},removeProject(t){this.projects.splice(t,1)}};function S(t){return p(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function M(t){if(p(1,arguments),!S(t)&&"number"!=typeof t)return!1;var e=g(t);return!isNaN(Number(e))}function D(t,e){p(2,arguments);var n=g(t).getTime(),r=y(e);return new Date(n+r)}function j(t,e){p(2,arguments);var n=y(e);return D(t,-n)}k=x.getTodoApp()||Object.create(k);var P=864e5;function q(t){p(1,arguments);var e=1,n=g(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function L(t){p(1,arguments);var e=g(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=q(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=q(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function U(t){p(1,arguments);var e=L(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=q(n);return r}var W=6048e5;function Y(t,e){var n,r,o,a,i,d,s,c;p(1,arguments);var u=C(),l=y(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=g(t),m=f.getUTCDay(),A=(m<l?7:0)+m-l;return f.setUTCDate(f.getUTCDate()-A),f.setUTCHours(0,0,0,0),f}function O(t,e){var n,r,o,a,i,d,s,c;p(1,arguments);var u=g(t),l=u.getUTCFullYear(),f=C(),m=y(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:f.firstWeekContainsDate)&&void 0!==r?r:null===(s=f.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=new Date(0);A.setUTCFullYear(l+1,0,m),A.setUTCHours(0,0,0,0);var h=Y(A,e),v=new Date(0);v.setUTCFullYear(l,0,m),v.setUTCHours(0,0,0,0);var b=Y(v,e);return u.getTime()>=h.getTime()?l+1:u.getTime()>=b.getTime()?l:l-1}function N(t,e){var n,r,o,a,i,d,s,c;p(1,arguments);var u=C(),l=y(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),f=O(t,e),m=new Date(0);m.setUTCFullYear(f,0,l),m.setUTCHours(0,0,0,0);var A=Y(m,e);return A}var z=6048e5;function F(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const H=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return F("yy"===e?r%100:r,e.length)},I=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):F(n+1,2)},R=function(t,e){return F(t.getUTCDate(),e.length)},X=function(t,e){return F(t.getUTCHours()%12||12,e.length)},Q=function(t,e){return F(t.getUTCHours(),e.length)},G=function(t,e){return F(t.getUTCMinutes(),e.length)},J=function(t,e){return F(t.getUTCSeconds(),e.length)},Z=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return F(Math.floor(r*Math.pow(10,n-3)),e.length)};var _={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return H(t,e)},Y:function(t,e,n,r){var o=O(t,r),a=o>0?o:1-o;return"YY"===e?F(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):F(a,e.length)},R:function(t,e){return F(L(t),e.length)},u:function(t,e){return F(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return F(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return F(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return I(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return F(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){p(1,arguments);var n=g(t),r=Y(n,e).getTime()-N(n,e).getTime();return Math.round(r/z)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):F(o,e.length)},I:function(t,e,n){var r=function(t){p(1,arguments);var e=g(t),n=q(e).getTime()-U(e).getTime();return Math.round(n/W)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):F(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):R(t,e)},D:function(t,e,n){var r=function(t){p(1,arguments);var e=g(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/P)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):F(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return F(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return F(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return F(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return X(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Q(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):F(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):F(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):G(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):J(t,e)},S:function(t,e){return Z(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return K(o);case"XXXX":case"XX":return $(o);default:return $(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return K(o);case"xxxx":case"xx":return $(o);default:return $(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+V(o,":");default:return"GMT"+$(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+V(o,":");default:return"GMT"+$(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return F(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return F((r._originalDate||t).getTime(),e.length)}};function V(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=e||"";return n+String(o)+i+F(a,2)}function K(t,e){return t%60==0?(t>0?"-":"+")+F(Math.abs(t)/60,2):$(t,e)}function $(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+F(Math.floor(o/60),2)+n+F(o%60,2)}const tt=_;var et=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},nt=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const rt={p:nt,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return et(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",et(o,e)).replace("{{time}}",nt(a,e))}};function ot(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var at=["D","DD"],it=["YY","YYYY"];function dt(t){return-1!==at.indexOf(t)}function st(t){return-1!==it.indexOf(t)}function ct(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ut={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function lt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const ft={date:lt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:lt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:lt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var mt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function At(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=t.formattingValues[a]||t.formattingValues[o]}else{var i=t.defaultWidth,d=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[d]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const pt={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:At({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:At({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:At({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:At({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:At({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function gt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,d=a[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?vt(s,(function(t){return t.test(d)})):ht(s,(function(t){return t.test(d)}));i=t.valueCallback?t.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var u=e.slice(d.length);return{value:i,rest:u}}}function ht(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function vt(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var yt,bt={ordinalNumber:(yt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(yt.matchPattern);if(!n)return null;var r=n[0],o=t.match(yt.parsePattern);if(!o)return null;var a=yt.valueCallback?yt.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(r.length);return{value:a,rest:i}}),era:gt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:gt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:gt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:gt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:gt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Ct={code:"en-US",formatDistance:function(t,e,n){var r,o=ut[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:ft,formatRelative:function(t,e,n,r){return mt[t]},localize:pt,match:bt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var wt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,xt=/^'([^]*?)'?$/,Tt=/''/g,Bt=/[a-zA-Z]/;function kt(t,e,n){var r,o,a,i,d,s,c,u,l,f,m,A,h,v,b,w,E,x;p(2,arguments);var T=String(e),B=C(),k=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:B.locale)&&void 0!==r?r:Ct,S=y(null!==(a=null!==(i=null!==(d=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==d?d:B.firstWeekContainsDate)&&void 0!==i?i:null===(l=B.locale)||void 0===l||null===(f=l.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==a?a:1);if(!(S>=1&&S<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=y(null!==(m=null!==(A=null!==(h=null!==(v=null==n?void 0:n.weekStartsOn)&&void 0!==v?v:null==n||null===(b=n.locale)||void 0===b||null===(w=b.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==h?h:B.weekStartsOn)&&void 0!==A?A:null===(E=B.locale)||void 0===E||null===(x=E.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==m?m:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!k.localize)throw new RangeError("locale must contain localize property");if(!k.formatLong)throw new RangeError("locale must contain formatLong property");var P=g(t);if(!M(P))throw new RangeError("Invalid time value");var q=ot(P),L=j(P,q),U={firstWeekContainsDate:S,weekStartsOn:D,locale:k,_originalDate:P},W=T.match(Et).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,rt[e])(t,k.formatLong):t})).join("").match(wt).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return St(r);var a=tt[o];if(a)return null!=n&&n.useAdditionalWeekYearTokens||!st(r)||ct(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!dt(r)||ct(r,e,String(t)),a(L,r,k.localize,U);if(o.match(Bt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return W}function St(t){var e=t.match(xt);return e?e[1].replace(Tt,"'"):t}const Mt=document.querySelector(".todos"),Dt=document.querySelector(".projectlist"),jt=document.querySelector("aside"),Pt=document.querySelector(".toggle-sidebar"),qt=document.querySelector(".nav"),Lt=qt.querySelectorAll("button"),Ut=document.querySelector("[data-index='inbox']"),Wt=document.querySelector("[data-index='today']"),Yt=document.querySelector("[data-index='week']"),Ot=document.querySelector("#add-button-template"),Nt=document.querySelector("#project-template"),zt=document.querySelector("#todo-template"),Ft=document.querySelector("#add-project-template"),Ht=document.querySelector("#add-todo-template");let It;const Rt=(t,e,n)=>{const r=document.importNode(zt.content,!0),o=r.querySelector("li"),a=r.querySelector("input"),i=r.querySelector("p:first-of-type"),d=r.querySelector("p:last-of-type"),s=r.querySelector("button:first-of-type"),c=r.querySelector("button:last-of-type");i.textContent="".concat(t.description),d.textContent="".concat(t.dueDate),s.dataset.todoIndex="".concat(e),c.dataset.todoIndex="".concat(e),!0===t.isComplete&&(a.checked=!0,i.classList.add("check"),d.classList.add("check")),a.addEventListener("change",(()=>{a.checked?(i.classList.add("check"),d.classList.add("check"),t.isComplete=!0):(i.classList.remove("check"),d.classList.remove("check"),t.isComplete=!1)})),s.dataset.projectIndex=n,s.addEventListener("click",(t=>{t.stopPropagation(),Gt(n,e)})),c.dataset.projectIndex=n,c.addEventListener("click",(t=>{t.stopPropagation(),Xt(n,e)})),Mt.appendChild(o)},Xt=(t,e)=>{x.removeTodo(t,e),Jt(),te(t)},Qt=t=>{const e=document.importNode(Ot.content,!0),n=e.querySelector("li");e.querySelector("p").textContent="Add task",n.addEventListener("click",(()=>Gt(t))),Mt.appendChild(n)},Gt=(t,e)=>{Mt.removeChild(Mt.lastChild);const n=document.importNode(Ht.content,!0),r=n.querySelector("form"),o=n.querySelector("input[type=text]"),a=n.querySelector("input[type=date]"),i=n.querySelector("select"),d=n.querySelector("button[type=submit]");if(n.querySelector("button[type=reset]").addEventListener("click",(()=>{Mt.removeChild(Mt.lastChild),Qt(t)})),e||0===e){const n=k.projects[t].todoList[e];return o.value=n.description,a.value=kt(g(new Date(n.getDateFormatted())),"yyyy-MM-dd"),r.addEventListener("submit",(n=>{n.preventDefault();const r=kt(new Date(a.value),"dd/MM/yyyy");x.editTodo(t,e,o.value,r),Vt(t),te(t)})),i.style.display="none",d.textContent="Edit",void Mt.appendChild(r)}null===t?(k.projects.forEach((t=>{const e=document.createElement("option");e.textContent="".concat(t.description),e.value="".concat(t.description),i.appendChild(e)})),r.addEventListener("submit",(e=>{e.preventDefault(),t=k.projects.findIndex((t=>t.description==="".concat(i.value)));const n=kt(new Date(a.value),"dd/MM/yyyy"),r=new T(o.value,n);x.addTodo(t,r),Vt(t),te(t)})),Mt.appendChild(r)):(r.addEventListener("submit",(e=>{e.preventDefault();const n=kt(new Date(a.value),"dd/MM/yyyy"),r=new T(o.value,n);x.addTodo(t,r),Vt(t),te(t)})),i.style.display="none",Mt.appendChild(r))},Jt=()=>{Mt.innerHTML=""};qt.addEventListener("click",(t=>{Zt(t)}));const Zt=t=>{Lt.forEach((t=>t.classList.remove("active"))),"inbox"===t.target.dataset.index?document.querySelector("#inbox").classList.add("active"):"today"===t.target.dataset.index?document.querySelector("#today").classList.add("active"):"week"===t.target.dataset.index?document.querySelector("#week").classList.add("active"):"complete"===t.target.dataset.index&&document.querySelector("#complete").classList.add("active"),It=null,ne(),Kt()};Dt.addEventListener("click",(t=>{_t(t)}));const _t=t=>{Lt.forEach((t=>t.classList.remove("active"))),t.target.dataset.index?(It=t.target.dataset.index,ne(),Kt()):t.target.closest("[data-index]")&&(It=t.target.parentElement.getAttribute("data-index"),ne(),Kt())},Vt=t=>{Lt.forEach((t=>t.classList.remove("active"))),It=t,ne(),Kt()},Kt=()=>{x.getTodoApp().getProjects().forEach(((t,e)=>{const n=document.importNode(Nt.content,!0),r=n.querySelector("li"),o=n.querySelector("p"),a=n.querySelector("button");r.dataset.index=e,a.dataset.projectIndex=e,o.textContent="".concat(t.description),e==It&&r.classList.add("active"),r.addEventListener("click",(()=>{te(e)})),a.addEventListener("click",(t=>{ee(t)})),Dt.appendChild(r)})),$t()},$t=()=>{const t=document.importNode(Ot.content,!0),e=t.querySelector("li");t.querySelector("p").textContent="Add project",e.addEventListener("click",(()=>(()=>{Dt.removeChild(Dt.lastChild);const t=document.importNode(Ft.content,!0),e=t.querySelector("form"),n=t.querySelector("input"),r=t.querySelector('button[type="reset"]');Dt.appendChild(e),e.addEventListener("submit",(t=>{if(t.preventDefault(),x.getTodoApp().contains(n.value))return n.value="",void alert("Project names must be different");const e=new B(n.value);x.addProject(e);const r=x.getTodoApp().getIndex(n.value);ne(),Kt(),te(r)})),r.addEventListener("click",(()=>{Dt.removeChild(Dt.lastChild),$t()}))})())),Dt.appendChild(e)},te=t=>{Jt();const e=x.getTodoApp().getProjects()[t].getDescription();re(e),x.getTodoApp().getProjects()[t].getTodos().forEach(((e,n)=>{Rt(e,n,t)})),Qt(t)},ee=t=>{t.stopPropagation();const e=t.target.dataset.projectIndex;x.removeProject(e),ne(),Kt(),Jt(),ae()},ne=()=>{Dt.innerHTML=""},re=t=>{const e=document.createElement("h4");e.textContent=t,Mt.appendChild(e)},oe=()=>{const t=document.createElement("p");t.textContent="Please create your first project",Mt.appendChild(t)},ae=()=>{re("Inbox"),x.getTodoApp().getProjects().forEach(((t,e)=>{t.todoList.forEach(((t,n)=>{Rt(t,n,e)}))})),0!=x.getTodoApp().getProjects().length?Qt(null):oe()};Ut.addEventListener("click",(()=>{Jt(),ae()})),Pt.addEventListener("click",(()=>{jt.classList.toggle("aside-show")})),window.addEventListener("resize",(()=>{window.innerWidth>=960&&jt.classList.remove("aside-show")})),window.onload=()=>document.querySelector("#inbox").classList.add("active"),Wt.addEventListener("click",(()=>{ie()}));const ie=()=>{Jt(),re("Today"),x.getTodoApp().getProjects().forEach(((t,e)=>{t.getTodayTodos().forEach(((t,n)=>{Rt(t,n,e)}))})),0!=x.getTodoApp().getProjects().length?Qt(null):oe()};Yt.addEventListener("click",(()=>{de()}));const de=()=>{Jt(),re("Next 7 days"),x.getTodoApp().getProjects().forEach(((t,e)=>{t.getThisWeekTodos().forEach(((t,n)=>{Rt(t,n,e)}))})),0!=x.getTodoApp().getProjects().length?Qt(null):oe()};document.querySelector("#inbox").classList.add("active"),ae(),Kt()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,