(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var o=e(537),i=e.n(o),r=e(645),a=e.n(r)()(i());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat&display=swap);"]),a.push([n.id,'* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: rgb(181, 185, 181);\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;EACV,qCAAqC;EACrC,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,cAAc;EACd,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,UAAU;EACV,WAAW;EACX,iBAAiB;EACjB,yBAAyB;AAC3B;;AAEA;;;CAGC;;AAED;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Montserrat&display=swap");\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: rgb(181, 185, 181);\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n'],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(a[A]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);o&&a[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([r]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var r={},a=[],s=0;s<n.length;s++){var A=n[s],l=o.base?A[0]+o.base:A[0],c=r[l]||0,d="".concat(l," ").concat(c);r[l]=c+1;var p=e(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var f=i(u,o);o.byIndex=s,t.splice(s,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var s=e(r[a]);t[s].references--}for(var A=o(n,i),l=0;l<r.length;l++){var c=e(r[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=A}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,i&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var r=e.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={id:o,exports:{}};return n[o](r,r.exports,e),r.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0;var o={};(()=>{e.d(o,{m:()=>L});var n=e(379),t=e.n(n),i=e(795),r=e.n(i),a=e(569),s=e.n(a),A=e(565),l=e.n(A),c=e(216),d=e.n(c),p=e(589),u=e.n(p),f=e(426),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=s().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=d(),t()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const C=document.querySelector(".todos"),E=document.querySelector(".projectlist"),h=(n,t,e,o,i)=>{const r=document.createElement(n);return t&&r.classList.add(t),e&&(r.textContent=e),o&&r.setAttribute("type",o),i&&(r.dataset.index=i),r},g=(n,t)=>{const e=h("li",null,null),o=h("input",null,null,"checkbox"),i=h("p",null,"".concat(n.description)),r=h("p",null,"".concat(n.dueDate)),a=h("button","material-symbols-outlined","edit"),s=h("button","material-symbols-outlined","delete",null,"".concat(t));s.addEventListener("click",(n=>{n.stopPropagation()})),e.appendChild(o),e.appendChild(i),e.appendChild(r),e.appendChild(a),e.appendChild(s),C.appendChild(e)},b=n=>{const t=h("button","addtodo","+Add task",null,"".concat(n));t.addEventListener("click",(n=>B(n))),C.appendChild(t)},B=n=>{C.removeChild(C.lastChild);const t=h("form",null,null),e=h("input",null,null,"text"),o=h("input",null,null,"text"),i=h("input",null,null),r=h("datalist",null,null),a=h("button",null,"Add","submit");e.required=!0,e.setAttribute("placeholder","Task description"),i.setAttribute("list","projects"),r.setAttribute("id","projects");const s=n.target.dataset.index;t.addEventListener("submit",(n=>{n.preventDefault();let t=e.value,i=o.value;L.projects[s].addTodo(t,i),console.log(L)})),t.appendChild(e),t.appendChild(o),t.appendChild(i),t.appendChild(r),t.appendChild(a),C.appendChild(t)},y=()=>{C.innerHTML=""},v=()=>{L.projects.forEach(((n,t)=>{const e=h("li",null,null),o=h("span","material-symbols-outlined","list"),i=h("p",null,"".concat(n.description)),r=h("button","material-symbols-outlined","delete",null,"".concat(t));e.appendChild(o),e.appendChild(i),e.appendChild(r),e.addEventListener("click",(()=>{y(),n.todoList.forEach(((n,t)=>{g(n,t)})),b(t)})),r.addEventListener("click",(n=>{x(n),y(),k()})),E.appendChild(e)}))},x=n=>{n.stopPropagation(),console.log("yes");const t=n.target.dataset.index;L.removeProject(t),j(),v(),console.log(L)},j=()=>{E.innerHTML=""},k=()=>{L.projects.forEach((n=>{n.todoList.forEach(((n,t)=>{g(n,t)}))})),b()};document.querySelector("#inbox").addEventListener("click",(()=>{y(),k()}));class w{constructor(n,t,e){this.description=n,this.dueDate=t,this.project=e,this.isComplete=!1}editTodo(n,t){this.description=n,this.dueDate=t}completeTodo(){this.isComplete=!0}}class T{constructor(n){this.description=n,this.todoList=[]}editProject(n){this.description=n}addTodo(n){this.todoList.push(n)}removeTodo(n){this.todoList.splice(n,1)}}const L={projects:[],addProject(n){this.projects.push(n)},removeProject(n){console.log(n),this.projects.splice(n,1)}},z=new T("demo"),M=new T("demo2"),S=new w("to clean room","2pm","demo"),P=new w("to run","5.09");z.addTodo(S),M.addTodo(S),M.addTodo(P),L.addProject(z),L.addProject(M),k(),v()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,