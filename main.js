(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat&display=swap);"]),a.push([n.id,'* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: rgb(181, 185, 181);\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n\n.check {\n  text-decoration: line-through;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;EACV,qCAAqC;EACrC,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,cAAc;EACd,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,UAAU;EACV,WAAW;EACX,iBAAiB;EACjB,yBAAyB;AAC3B;;AAEA;;;CAGC;;AAED;EACE,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6BAA6B;AAC/B",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Montserrat&display=swap");\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: "Montserrat", sans-serif;\n  font-size: 18px;\n  font-size: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 5rem 1fr;\n}\n\nheader {\n  background-color: #ff9000;\n  padding: 1rem;\n  grid-column: span 2;\n  display: flex;\n  align-items: center;\n  font-size: 2rem;\n  color: white;\n}\n\naside {\n  background-color: #fafafa;\n  padding: 2rem;\n}\n\naside li span {\n  margin-right: 10px;\n}\n\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 10px;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\naside button:hover {\n  background-color: #f0eded;\n}\n\n.projects {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.projects button {\n  font-size: 2rem;\n  width: auto;\n}\n\n.projects button:hover {\n  color: #ff9000;\n  background-color: inherit;\n}\n\naside p {\n  font-size: 1.3rem;\n  font-weight: 900;\n}\n\n.projectlist li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.projectlist li p {\n  font-size: 1rem;\n}\n\n.projectlist li:hover {\n  background-color: #f0eded;\n}\n\n.projectlist li button {\n  padding: 0;\n  width: auto;\n  margin-left: auto;\n  color: rgb(181, 185, 181);\n}\n\n/*\nto fix bold font\nto ADD transition!\n*/\n\n.main {\n  background-color: #ffffff;\n  padding: 2rem;\n}\n\n.main li {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.main li p:first-of-type {\n  margin-right: auto;\n  margin-left: 10px;\n}\n\n.main li button {\n  width: auto;\n  padding: 5px 10px;\n}\n\n.main li button:nth-of-type(1) {\n  color: rgb(8, 146, 15);\n}\n\n.main li button:nth-of-type(2) {\n  color: rgb(186, 63, 6);\n}\n\n.main li:hover {\n  background-color: #fafafa;\n}\n\n.check {\n  text-decoration: line-through;\n}\n'],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],s=0;s<n.length;s++){var l=n[s],d=o.base?l[0]+o.base:l[0],c=i[d]||0,A="".concat(d," ").concat(c);i[d]=c+1;var p=t(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=r(u,o);o.byIndex=s,e.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var l=o(n,r),d=0;d<i.length;d++){var c=t(i[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var o={};(()=>{t.d(o,{IK:()=>S,PK:()=>M,mK:()=>D});var n=t(379),e=t.n(n),r=t(795),i=t.n(r),a=t(569),s=t.n(a),l=t(565),d=t.n(l),c=t(216),A=t.n(c),p=t(589),u=t.n(p),f=t(426),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=s().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=A(),e()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const h=document.querySelector(".todos"),C=document.querySelector(".projectlist"),g=document.querySelector("#inbox"),E=document.querySelector("#complete"),b=document.querySelector(".addproject");let v=!1;const B=(n,e,t,o,r,i)=>{const a=document.createElement(n);return e&&a.classList.add(e),t&&(a.textContent=t),o&&a.setAttribute("type",o),r&&(a.dataset.projectIndex=r),i&&(a.dataset.todoIndex=i),a},y=(n,e,t)=>{const o=B("li",null,null),r=B("input",null,null,"checkbox"),i=B("p",null,"".concat(n.description)),a=B("p",null,"".concat(n.dueDate)),s=B("button","material-symbols-outlined","edit",null,null,"".concat(e)),l=B("button","material-symbols-outlined","delete",null,null,"".concat(e));!0===n.isComplete&&(r.checked=!0,i.classList.add("check"),a.classList.add("check")),r.addEventListener("change",(()=>{r.checked?(i.classList.add("check"),a.classList.add("check"),n.isComplete=!0):(i.classList.remove("check"),a.classList.remove("check"),n.isComplete=!1,!0===v&&(P(),v=!1))})),s.dataset.projectIndex=t,s.addEventListener("click",(n=>{n.stopPropagation(),console.log("yap"),j(n)})),l.dataset.projectIndex=t,l.addEventListener("click",(n=>{n.stopPropagation(),D.projects[n.target.dataset.projectIndex].removeTodo(n.target.dataset.todoIndex),k(),z()})),o.appendChild(r),o.appendChild(i),o.appendChild(a),o.appendChild(s),o.appendChild(l),h.appendChild(o)},x=n=>{const e=B("button",null,"+Add task",null,"".concat(n));e.addEventListener("click",(n=>j(n))),h.appendChild(e)},j=n=>{console.log(h.lastChild),h.removeChild(h.lastChild);const e=B("form",null,null),t=B("input",null,null,"text"),o=B("input",null,null,"text"),r=B("select",null,null),i=B("button",null,"Add","submit"),a=B("button",null,"Cancel","reset");if(t.required=!0,t.setAttribute("placeholder","Task description"),r.setAttribute("name","projects"),a.addEventListener("click",(()=>{h.removeChild(h.lastChild),x(n.target.dataset.projectIndex)})),n.target.dataset.todoIndex){console.log(n.target.dataset.todoIndex),console.log(n.target.dataset.projectIndex);const r=n.target.dataset.projectIndex,s=D.projects[n.target.dataset.projectIndex].todoList[n.target.dataset.todoIndex];return console.log(s),t.value=s.description,o.value=s.dueDate,e.addEventListener("submit",(n=>{n.preventDefault(),s.editTodo(t.value,o.value),console.log(D),w(r)})),e.appendChild(t),e.appendChild(o),e.appendChild(i),e.appendChild(a),void h.appendChild(e)}if("null"==n.target.dataset.projectIndex)D.projects.forEach((n=>{const e=B("option",null,"".concat(n.description));e.setAttribute("value","".concat(n.description)),r.appendChild(e)})),console.log("YYYEP"),e.addEventListener("submit",(n=>{n.preventDefault(),console.log(D);const e=D.projects.findIndex((n=>n.description==="".concat(r.value))),i=new M(t.value,o.value);D.projects[e].addTodo(i),console.log(D),w(e)})),e.appendChild(t),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(a),h.appendChild(e);else{const r=n.target.dataset.projectIndex;console.log("test"),e.addEventListener("submit",(n=>{n.preventDefault();const e=new M(t.value,o.value);D.projects[r].addTodo(e),console.log(D),w(r)})),e.appendChild(t),e.appendChild(o),e.appendChild(i),e.appendChild(a),h.appendChild(e)}},k=()=>{h.innerHTML=""},L=()=>{D.projects.forEach(((n,e)=>{const t=B("li",null,null),o=B("span","material-symbols-outlined","list"),r=B("p",null,"".concat(n.description)),i=B("button","material-symbols-outlined","delete",null,"".concat(e));t.appendChild(o),t.appendChild(r),t.appendChild(i),t.addEventListener("click",(()=>{w(e)})),i.addEventListener("click",(n=>{I(n),k(),z()})),C.appendChild(t)}))},w=n=>{k(),D.projects[n].todoList.forEach(((e,t)=>{y(e,t,n)})),x(n)},I=n=>{n.stopPropagation(),console.log("yes");const e=n.target.dataset.projectIndex;D.removeProject(e),T(),L(),console.log(D)},T=()=>{C.innerHTML=""},z=()=>{D.projects.forEach(((n,e)=>{n.todoList.forEach(((n,t)=>{y(n,t,e)}))})),x(null)},P=()=>{D.projects.forEach(((n,e)=>{const t=n.todoList.filter((n=>!0===n.isComplete));v=!0,console.log(t),t.forEach(((n,t)=>{y(n,t,e)}))}))};g.addEventListener("click",(()=>{k(),z()})),E.addEventListener("click",(()=>{k(),P()})),b.addEventListener("click",(()=>(()=>{console.log("ok");const n=B("form",null,null),e=B("input",null,null,"text"),t=B("button",null,"Add","submit"),o=B("button",null,"Cancel","reset");e.required=!0,n.appendChild(e),n.appendChild(t),n.appendChild(o),C.appendChild(n),n.addEventListener("submit",(n=>{n.preventDefault();const t=new S(e.value);D.addProject(t),console.log(D),T(),L()}))})()));class M{constructor(n,e,t){this.description=n,this.dueDate=e,this.project=t,this.isComplete=!1}editTodo(n,e){this.description=n,this.dueDate=e}completeTodo(){this.isComplete=!1}}class S{constructor(n){this.description=n,this.todoList=[]}editProject(n){this.description=n}addTodo(n){this.todoList.push(n)}removeTodo(n){this.todoList.splice(n,1)}}const D={projects:[],addProject(n){this.projects.push(n)},removeProject(n){console.log(n),this.projects.splice(n,1)}},q=new S("demo"),U=new S("demo2"),W=new M("to clean room","2pm","demo"),R=new M("to run","5.09"),Y=new M("to clean room","2pm","demo");q.addTodo(W),U.addTodo(Y),U.addTodo(R),D.addProject(q),D.addProject(U),z(),L()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBYTdDLFFBQVErQyxHQUVyQnBELEVBQVEyQyxXQUFXTSxHQUNuQmpELEVBQVEyQyxXQUFXTyxHQUVuQi9DLElBQ0F5QixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9ET00uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9TW9udHNlcnJhdCZkaXNwbGF5PXN3YXApO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNb250c2VycmF0XFxcIiwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG59XFxuXFxubGkge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG5ib2R5IHtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzAwcHggMWZyO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA1cmVtIDFmcjtcXG59XFxuXFxuaGVhZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjkwMDA7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgZ3JpZC1jb2x1bW46IHNwYW4gMjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG5hc2lkZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhO1xcbiAgcGFkZGluZzogMnJlbTtcXG59XFxuXFxuYXNpZGUgbGkgc3BhbiB7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcblxcbmJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG91dGxpbmU6IGluaGVyaXQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG5hc2lkZSBidXR0b246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZWRlZDtcXG59XFxuXFxuLnByb2plY3RzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbn1cXG5cXG4ucHJvamVjdHMgYnV0dG9uIHtcXG4gIGZvbnQtc2l6ZTogMnJlbTtcXG4gIHdpZHRoOiBhdXRvO1xcbn1cXG5cXG4ucHJvamVjdHMgYnV0dG9uOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmY5MDAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuYXNpZGUgcCB7XFxuICBmb250LXNpemU6IDEuM3JlbTtcXG4gIGZvbnQtd2VpZ2h0OiA5MDA7XFxufVxcblxcbi5wcm9qZWN0bGlzdCBsaSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5wcm9qZWN0bGlzdCBsaSBwIHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuXFxuLnByb2plY3RsaXN0IGxpOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGVkZWQ7XFxufVxcblxcbi5wcm9qZWN0bGlzdCBsaSBidXR0b24ge1xcbiAgcGFkZGluZzogMDtcXG4gIHdpZHRoOiBhdXRvO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBjb2xvcjogcmdiKDE4MSwgMTg1LCAxODEpO1xcbn1cXG5cXG4vKlxcbnRvIGZpeCBib2xkIGZvbnRcXG50byBBREQgdHJhbnNpdGlvbiFcXG4qL1xcblxcbi5tYWluIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XFxuICBwYWRkaW5nOiAycmVtO1xcbn1cXG5cXG4ubWFpbiBsaSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5tYWluIGxpIHA6Zmlyc3Qtb2YtdHlwZSB7XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICBtYXJnaW4tbGVmdDogMTBweDtcXG59XFxuXFxuLm1haW4gbGkgYnV0dG9uIHtcXG4gIHdpZHRoOiBhdXRvO1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxufVxcblxcbi5tYWluIGxpIGJ1dHRvbjpudGgtb2YtdHlwZSgxKSB7XFxuICBjb2xvcjogcmdiKDgsIDE0NiwgMTUpO1xcbn1cXG5cXG4ubWFpbiBsaSBidXR0b246bnRoLW9mLXR5cGUoMikge1xcbiAgY29sb3I6IHJnYigxODYsIDYzLCA2KTtcXG59XFxuXFxuLm1haW4gbGk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYTtcXG59XFxuXFxuLmNoZWNrIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLFNBQVM7RUFDVCxVQUFVO0VBQ1YscUNBQXFDO0VBQ3JDLGVBQWU7RUFDZixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsYUFBYTtFQUNiLGdDQUFnQztFQUNoQyw0QkFBNEI7QUFDOUI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsYUFBYTtBQUNmOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGNBQWM7RUFDZCxZQUFZO0VBQ1osYUFBYTtFQUNiLGFBQWE7RUFDYixlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsV0FBVztBQUNiOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQiw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsV0FBVztBQUNiOztBQUVBO0VBQ0UsY0FBYztFQUNkLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLGFBQWE7RUFDYixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLHlCQUF5QjtBQUMzQjs7QUFFQTs7O0NBR0M7O0FBRUQ7RUFDRSx5QkFBeUI7RUFDekIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsNkJBQTZCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU1vbnRzZXJyYXQmZGlzcGxheT1zd2FwXFxcIik7XFxuXFxuKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTW9udHNlcnJhdFxcXCIsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBmb250LXNpemU6IGluaGVyaXQ7XFxufVxcblxcbmxpIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuXFxuYm9keSB7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwMHB4IDFmcjtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogNXJlbSAxZnI7XFxufVxcblxcbmhlYWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY5MDAwO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGdyaWQtY29sdW1uOiBzcGFuIDI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMnJlbTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuYXNpZGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYTtcXG4gIHBhZGRpbmc6IDJyZW07XFxufVxcblxcbmFzaWRlIGxpIHNwYW4ge1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbn1cXG5cXG5idXR0b24ge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGZvbnQ6IGluaGVyaXQ7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBvdXRsaW5lOiBpbmhlcml0O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuYXNpZGUgYnV0dG9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGVkZWQ7XFxufVxcblxcbi5wcm9qZWN0cyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuLnByb2plY3RzIGJ1dHRvbiB7XFxuICBmb250LXNpemU6IDJyZW07XFxuICB3aWR0aDogYXV0bztcXG59XFxuXFxuLnByb2plY3RzIGJ1dHRvbjpob3ZlciB7XFxuICBjb2xvcjogI2ZmOTAwMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbmFzaWRlIHAge1xcbiAgZm9udC1zaXplOiAxLjNyZW07XFxuICBmb250LXdlaWdodDogOTAwO1xcbn1cXG5cXG4ucHJvamVjdGxpc3QgbGkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucHJvamVjdGxpc3QgbGkgcCB7XFxuICBmb250LXNpemU6IDFyZW07XFxufVxcblxcbi5wcm9qZWN0bGlzdCBsaTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBlZGVkO1xcbn1cXG5cXG4ucHJvamVjdGxpc3QgbGkgYnV0dG9uIHtcXG4gIHBhZGRpbmc6IDA7XFxuICB3aWR0aDogYXV0bztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgY29sb3I6IHJnYigxODEsIDE4NSwgMTgxKTtcXG59XFxuXFxuLypcXG50byBmaXggYm9sZCBmb250XFxudG8gQUREIHRyYW5zaXRpb24hXFxuKi9cXG5cXG4ubWFpbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xcbiAgcGFkZGluZzogMnJlbTtcXG59XFxuXFxuLm1haW4gbGkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ubWFpbiBsaSBwOmZpcnN0LW9mLXR5cGUge1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxufVxcblxcbi5tYWluIGxpIGJ1dHRvbiB7XFxuICB3aWR0aDogYXV0bztcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbn1cXG5cXG4ubWFpbiBsaSBidXR0b246bnRoLW9mLXR5cGUoMSkge1xcbiAgY29sb3I6IHJnYig4LCAxNDYsIDE1KTtcXG59XFxuXFxuLm1haW4gbGkgYnV0dG9uOm50aC1vZi10eXBlKDIpIHtcXG4gIGNvbG9yOiByZ2IoMTg2LCA2MywgNik7XFxufVxcblxcbi5tYWluIGxpOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7XFxufVxcblxcbi5jaGVjayB7XFxuICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyB0b2RvQXBwLCBQcm9qZWN0LCBUb2RvSXRlbSB9IGZyb20gXCIuXCI7XG5cbmNvbnN0IHRvZG9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b2Rvc1wiKTtcbmNvbnN0IHByb2plY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0bGlzdFwiKTtcbmNvbnN0IGluYm94QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNpbmJveFwiKTtcbmNvbnN0IGNvbXBsZXRlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb21wbGV0ZVwiKTtcbmNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZHByb2plY3RcIik7XG5sZXQgc2hvd0NvbXBsZXRlID0gZmFsc2U7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVIdG1sRWxlbWVudCA9IChcbiAgdGFnLFxuICBodG1sQ2xhc3MsXG4gIHRleHRDb250ZW50LFxuICB0eXBlLFxuICBwcm9qZWN0SW5kZXgsXG4gIHRvZG9JbmRleFxuKSA9PiB7XG4gIGNvbnN0IGh0bWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAoaHRtbENsYXNzKSB7XG4gICAgaHRtbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChodG1sQ2xhc3MpO1xuICB9XG4gIGlmICh0ZXh0Q29udGVudCkge1xuICAgIGh0bWxFbGVtZW50LnRleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGUpIHtcbiAgICBodG1sRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIHR5cGUpO1xuICB9XG4gIGlmIChwcm9qZWN0SW5kZXgpIHtcbiAgICBodG1sRWxlbWVudC5kYXRhc2V0LnByb2plY3RJbmRleCA9IHByb2plY3RJbmRleDtcbiAgfVxuICBpZiAodG9kb0luZGV4KSB7XG4gICAgaHRtbEVsZW1lbnQuZGF0YXNldC50b2RvSW5kZXggPSB0b2RvSW5kZXg7XG4gIH1cbiAgcmV0dXJuIGh0bWxFbGVtZW50O1xufTtcblxuY29uc3QgcmVuZGVyVG9kbyA9IChpdGVtLCB0b2RvSW5kZXgsIHByb2plY3RJbmRleCkgPT4ge1xuICBjb25zdCBpdGVtTGluZSA9IGNyZWF0ZUh0bWxFbGVtZW50KFwibGlcIiwgbnVsbCwgbnVsbCk7XG4gIGNvbnN0IGNoZWNrID0gY3JlYXRlSHRtbEVsZW1lbnQoXCJpbnB1dFwiLCBudWxsLCBudWxsLCBcImNoZWNrYm94XCIpO1xuICBjb25zdCBkZXNjUCA9IGNyZWF0ZUh0bWxFbGVtZW50KFwicFwiLCBudWxsLCBgJHtpdGVtLmRlc2NyaXB0aW9ufWApO1xuICBjb25zdCBkYXRlUCA9IGNyZWF0ZUh0bWxFbGVtZW50KFwicFwiLCBudWxsLCBgJHtpdGVtLmR1ZURhdGV9YCk7XG4gIGNvbnN0IGVkaXRCdG4gPSBjcmVhdGVIdG1sRWxlbWVudChcbiAgICBcImJ1dHRvblwiLFxuICAgIFwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiLFxuICAgIFwiZWRpdFwiLFxuICAgIG51bGwsXG4gICAgbnVsbCxcbiAgICBgJHt0b2RvSW5kZXh9YFxuICApO1xuICBjb25zdCBkZWxldGVCdG4gPSBjcmVhdGVIdG1sRWxlbWVudChcbiAgICBcImJ1dHRvblwiLFxuICAgIFwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiLFxuICAgIFwiZGVsZXRlXCIsXG4gICAgbnVsbCxcbiAgICBudWxsLFxuICAgIGAke3RvZG9JbmRleH1gXG4gICk7XG5cbiAgaWYgKGl0ZW0uaXNDb21wbGV0ZSA9PT0gdHJ1ZSkge1xuICAgIGNoZWNrLmNoZWNrZWQgPSB0cnVlO1xuICAgIGRlc2NQLmNsYXNzTGlzdC5hZGQoXCJjaGVja1wiKTtcbiAgICBkYXRlUC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tcIik7XG4gIH1cblxuICAvL3Jld29yayBsb2dpY3MgLSBhZGRjbGFzc2xpc3QgaWYgaXNDb21wbGV0ZSA9IHRydWVcbiAgY2hlY2suYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgaWYgKGNoZWNrLmNoZWNrZWQpIHtcbiAgICAgIGRlc2NQLmNsYXNzTGlzdC5hZGQoXCJjaGVja1wiKTtcbiAgICAgIGRhdGVQLmNsYXNzTGlzdC5hZGQoXCJjaGVja1wiKTtcbiAgICAgIGl0ZW0uaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc2NQLmNsYXNzTGlzdC5yZW1vdmUoXCJjaGVja1wiKTtcbiAgICAgIGRhdGVQLmNsYXNzTGlzdC5yZW1vdmUoXCJjaGVja1wiKTtcbiAgICAgIGl0ZW0uaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgaWYgKHNob3dDb21wbGV0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZW5kZXJDb21wbGV0ZSgpO1xuICAgICAgICBzaG93Q29tcGxldGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGVkaXRCdG4uZGF0YXNldC5wcm9qZWN0SW5kZXggPSBwcm9qZWN0SW5kZXg7XG4gIGVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjb25zb2xlLmxvZyhcInlhcFwiKTtcbiAgICBpbnB1dFRvZG8oZSk7XG4gIH0pO1xuXG4gIGRlbGV0ZUJ0bi5kYXRhc2V0LnByb2plY3RJbmRleCA9IHByb2plY3RJbmRleDtcbiAgZGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdG9kb0FwcC5wcm9qZWN0c1tlLnRhcmdldC5kYXRhc2V0LnByb2plY3RJbmRleF0ucmVtb3ZlVG9kbyhcbiAgICAgIGUudGFyZ2V0LmRhdGFzZXQudG9kb0luZGV4XG4gICAgKTtcbiAgICBjbGVhclRvZG9zKCk7XG4gICAgLy93aGVyZSBhcmUgeW91IG9uIGEgcGFnZT9cbiAgICByZW5kZXJJbmJveCgpO1xuICB9KTtcblxuICBpdGVtTGluZS5hcHBlbmRDaGlsZChjaGVjayk7XG4gIGl0ZW1MaW5lLmFwcGVuZENoaWxkKGRlc2NQKTtcbiAgaXRlbUxpbmUuYXBwZW5kQ2hpbGQoZGF0ZVApO1xuICBpdGVtTGluZS5hcHBlbmRDaGlsZChlZGl0QnRuKTtcbiAgaXRlbUxpbmUuYXBwZW5kQ2hpbGQoZGVsZXRlQnRuKTtcbiAgdG9kb3MuYXBwZW5kQ2hpbGQoaXRlbUxpbmUpO1xufTtcblxuY29uc3QgcmVuZGVyQWRkVG9kb0J1dHRvbiA9IChwcm9qZWN0SW5kZXgpID0+IHtcbiAgY29uc3QgYWRkVG9kbyA9IGNyZWF0ZUh0bWxFbGVtZW50KFxuICAgIFwiYnV0dG9uXCIsXG4gICAgbnVsbCxcbiAgICBcIitBZGQgdGFza1wiLFxuICAgIG51bGwsXG4gICAgLy9oZXJlIG51bGwgdHVybmVkIGludG8gYSB0ZW1wbGF0ZSBzdHJpbmdcbiAgICBgJHtwcm9qZWN0SW5kZXh9YFxuICApO1xuICBhZGRUb2RvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4gaW5wdXRUb2RvKGUpKTtcbiAgdG9kb3MuYXBwZW5kQ2hpbGQoYWRkVG9kbyk7XG59O1xuXG5jb25zdCBpbnB1dFRvZG8gPSAoZSkgPT4ge1xuICBjb25zb2xlLmxvZyh0b2Rvcy5sYXN0Q2hpbGQpO1xuICB0b2Rvcy5yZW1vdmVDaGlsZCh0b2Rvcy5sYXN0Q2hpbGQpO1xuICBjb25zdCB0b2RvSW5wdXRGb3JtID0gY3JlYXRlSHRtbEVsZW1lbnQoXCJmb3JtXCIsIG51bGwsIG51bGwpO1xuICBjb25zdCBpbnB1dERlc2NyaXB0aW9uID0gY3JlYXRlSHRtbEVsZW1lbnQoXCJpbnB1dFwiLCBudWxsLCBudWxsLCBcInRleHRcIik7XG4gIGNvbnN0IGlucHV0RHVlZGF0ZSA9IGNyZWF0ZUh0bWxFbGVtZW50KFwiaW5wdXRcIiwgbnVsbCwgbnVsbCwgXCJ0ZXh0XCIpO1xuICBjb25zdCBzZWxlY3QgPSBjcmVhdGVIdG1sRWxlbWVudChcInNlbGVjdFwiLCBudWxsLCBudWxsKTtcbiAgY29uc3Qgc3VibWl0QnRuID0gY3JlYXRlSHRtbEVsZW1lbnQoXCJidXR0b25cIiwgbnVsbCwgXCJBZGRcIiwgXCJzdWJtaXRcIik7XG4gIGNvbnN0IGNhbmNlbEJ0biA9IGNyZWF0ZUh0bWxFbGVtZW50KFwiYnV0dG9uXCIsIG51bGwsIFwiQ2FuY2VsXCIsIFwicmVzZXRcIik7XG5cbiAgaW5wdXREZXNjcmlwdGlvbi5yZXF1aXJlZCA9IHRydWU7XG4gIGlucHV0RGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgXCJUYXNrIGRlc2NyaXB0aW9uXCIpO1xuICBzZWxlY3Quc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInByb2plY3RzXCIpO1xuXG4gIC8vaG93IHRvIG9wdGltaXplPyBleHRyYWN0IGFuZCByZW5kZXIgYWxsIGFnYWluP1xuICBjYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICB0b2Rvcy5yZW1vdmVDaGlsZCh0b2Rvcy5sYXN0Q2hpbGQpO1xuICAgIHJlbmRlckFkZFRvZG9CdXR0b24oZS50YXJnZXQuZGF0YXNldC5wcm9qZWN0SW5kZXgpO1xuICB9KTtcblxuICBpZiAoZS50YXJnZXQuZGF0YXNldC50b2RvSW5kZXgpIHtcbiAgICBjb25zb2xlLmxvZyhlLnRhcmdldC5kYXRhc2V0LnRvZG9JbmRleCk7XG4gICAgY29uc29sZS5sb2coZS50YXJnZXQuZGF0YXNldC5wcm9qZWN0SW5kZXgpO1xuICAgIGNvbnN0IGN1cnJlbnRQcm9qZWN0SW5kZXggPSBlLnRhcmdldC5kYXRhc2V0LnByb2plY3RJbmRleDtcbiAgICBjb25zdCBjdXJyZW50VG9kbyA9XG4gICAgICB0b2RvQXBwLnByb2plY3RzW2UudGFyZ2V0LmRhdGFzZXQucHJvamVjdEluZGV4XS50b2RvTGlzdFtcbiAgICAgICAgZS50YXJnZXQuZGF0YXNldC50b2RvSW5kZXhcbiAgICAgIF07XG4gICAgY29uc29sZS5sb2coY3VycmVudFRvZG8pO1xuXG4gICAgaW5wdXREZXNjcmlwdGlvbi52YWx1ZSA9IGN1cnJlbnRUb2RvLmRlc2NyaXB0aW9uO1xuICAgIGlucHV0RHVlZGF0ZS52YWx1ZSA9IGN1cnJlbnRUb2RvLmR1ZURhdGU7XG4gICAgdG9kb0lucHV0Rm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjdXJyZW50VG9kby5lZGl0VG9kbyhpbnB1dERlc2NyaXB0aW9uLnZhbHVlLCBpbnB1dER1ZWRhdGUudmFsdWUpO1xuICAgICAgY29uc29sZS5sb2codG9kb0FwcCk7XG4gICAgICAvL3doZXJlIGFyZSB3ZSBvbiB0aGUgcGFnZT9cbiAgICAgIHJlbmRlclByb2plY3RUb2RvcyhjdXJyZW50UHJvamVjdEluZGV4KTtcbiAgICB9KTtcblxuICAgIHRvZG9JbnB1dEZvcm0uYXBwZW5kQ2hpbGQoaW5wdXREZXNjcmlwdGlvbik7XG4gICAgdG9kb0lucHV0Rm9ybS5hcHBlbmRDaGlsZChpbnB1dER1ZWRhdGUpO1xuICAgIHRvZG9JbnB1dEZvcm0uYXBwZW5kQ2hpbGQoc3VibWl0QnRuKTtcbiAgICB0b2RvSW5wdXRGb3JtLmFwcGVuZENoaWxkKGNhbmNlbEJ0bik7XG4gICAgdG9kb3MuYXBwZW5kQ2hpbGQodG9kb0lucHV0Rm9ybSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy9hYnN0cmFjdCBhd2F5IHRoZXNlIGZ1bmN0aW9uc1xuICBpZiAoZS50YXJnZXQuZGF0YXNldC5wcm9qZWN0SW5kZXggPT0gXCJudWxsXCIpIHtcbiAgICB0b2RvQXBwLnByb2plY3RzLmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgIGNvbnN0IHByb2plY3RPcHRpb24gPSBjcmVhdGVIdG1sRWxlbWVudChcbiAgICAgICAgXCJvcHRpb25cIixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgYCR7cHJvamVjdC5kZXNjcmlwdGlvbn1gXG4gICAgICApO1xuICAgICAgcHJvamVjdE9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBgJHtwcm9qZWN0LmRlc2NyaXB0aW9ufWApO1xuICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKHByb2plY3RPcHRpb24pO1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKFwiWVlZRVBcIik7XG5cbiAgICB0b2RvSW5wdXRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnNvbGUubG9nKHRvZG9BcHApO1xuICAgICAgY29uc3QgY3VycmVudFByb2plY3RJbmRleCA9IHRvZG9BcHAucHJvamVjdHMuZmluZEluZGV4KFxuICAgICAgICAocHJvamVjdCkgPT4gcHJvamVjdC5kZXNjcmlwdGlvbiA9PT0gYCR7c2VsZWN0LnZhbHVlfWBcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHRvZG9JdGVtID0gbmV3IFRvZG9JdGVtKGlucHV0RGVzY3JpcHRpb24udmFsdWUsIGlucHV0RHVlZGF0ZS52YWx1ZSk7XG4gICAgICB0b2RvQXBwLnByb2plY3RzW2N1cnJlbnRQcm9qZWN0SW5kZXhdLmFkZFRvZG8odG9kb0l0ZW0pO1xuICAgICAgY29uc29sZS5sb2codG9kb0FwcCk7XG4gICAgICByZW5kZXJQcm9qZWN0VG9kb3MoY3VycmVudFByb2plY3RJbmRleCk7XG4gICAgfSk7XG5cbiAgICB0b2RvSW5wdXRGb3JtLmFwcGVuZENoaWxkKGlucHV0RGVzY3JpcHRpb24pO1xuICAgIHRvZG9JbnB1dEZvcm0uYXBwZW5kQ2hpbGQoaW5wdXREdWVkYXRlKTtcbiAgICB0b2RvSW5wdXRGb3JtLmFwcGVuZENoaWxkKHNlbGVjdCk7XG4gICAgdG9kb0lucHV0Rm9ybS5hcHBlbmRDaGlsZChzdWJtaXRCdG4pO1xuICAgIHRvZG9JbnB1dEZvcm0uYXBwZW5kQ2hpbGQoY2FuY2VsQnRuKTtcbiAgICB0b2Rvcy5hcHBlbmRDaGlsZCh0b2RvSW5wdXRGb3JtKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjdXJyZW50UHJvamVjdEluZGV4ID0gZS50YXJnZXQuZGF0YXNldC5wcm9qZWN0SW5kZXg7XG5cbiAgICBjb25zb2xlLmxvZyhcInRlc3RcIik7XG4gICAgdG9kb0lucHV0Rm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCB0b2RvSXRlbSA9IG5ldyBUb2RvSXRlbShpbnB1dERlc2NyaXB0aW9uLnZhbHVlLCBpbnB1dER1ZWRhdGUudmFsdWUpO1xuICAgICAgdG9kb0FwcC5wcm9qZWN0c1tjdXJyZW50UHJvamVjdEluZGV4XS5hZGRUb2RvKHRvZG9JdGVtKTtcbiAgICAgIGNvbnNvbGUubG9nKHRvZG9BcHApO1xuICAgICAgcmVuZGVyUHJvamVjdFRvZG9zKGN1cnJlbnRQcm9qZWN0SW5kZXgpO1xuICAgIH0pO1xuXG4gICAgdG9kb0lucHV0Rm9ybS5hcHBlbmRDaGlsZChpbnB1dERlc2NyaXB0aW9uKTtcbiAgICB0b2RvSW5wdXRGb3JtLmFwcGVuZENoaWxkKGlucHV0RHVlZGF0ZSk7XG4gICAgdG9kb0lucHV0Rm9ybS5hcHBlbmRDaGlsZChzdWJtaXRCdG4pO1xuICAgIHRvZG9JbnB1dEZvcm0uYXBwZW5kQ2hpbGQoY2FuY2VsQnRuKTtcbiAgICB0b2Rvcy5hcHBlbmRDaGlsZCh0b2RvSW5wdXRGb3JtKTtcbiAgfVxufTtcblxuY29uc3QgY2xlYXJUb2RvcyA9ICgpID0+IHtcbiAgdG9kb3MuaW5uZXJIVE1MID0gXCJcIjtcbn07XG5cbmNvbnN0IGFkZFByb2plY3QgPSAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwib2tcIik7XG4gIGNvbnN0IHByb2plY3RJbnB1dEZvcm0gPSBjcmVhdGVIdG1sRWxlbWVudChcImZvcm1cIiwgbnVsbCwgbnVsbCk7XG4gIGNvbnN0IHByb2plY3REZXNjcmlwdGlvbiA9IGNyZWF0ZUh0bWxFbGVtZW50KFwiaW5wdXRcIiwgbnVsbCwgbnVsbCwgXCJ0ZXh0XCIpO1xuICBjb25zdCBzdWJtaXRCdG4gPSBjcmVhdGVIdG1sRWxlbWVudChcImJ1dHRvblwiLCBudWxsLCBcIkFkZFwiLCBcInN1Ym1pdFwiKTtcbiAgY29uc3QgY2FuY2VsQnRuID0gY3JlYXRlSHRtbEVsZW1lbnQoXCJidXR0b25cIiwgbnVsbCwgXCJDYW5jZWxcIiwgXCJyZXNldFwiKTtcblxuICBwcm9qZWN0RGVzY3JpcHRpb24ucmVxdWlyZWQgPSB0cnVlO1xuXG4gIHByb2plY3RJbnB1dEZvcm0uYXBwZW5kQ2hpbGQocHJvamVjdERlc2NyaXB0aW9uKTtcbiAgcHJvamVjdElucHV0Rm9ybS5hcHBlbmRDaGlsZChzdWJtaXRCdG4pO1xuICBwcm9qZWN0SW5wdXRGb3JtLmFwcGVuZENoaWxkKGNhbmNlbEJ0bik7XG4gIHByb2plY3RzLmFwcGVuZENoaWxkKHByb2plY3RJbnB1dEZvcm0pO1xuXG4gIHByb2plY3RJbnB1dEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IFByb2plY3QocHJvamVjdERlc2NyaXB0aW9uLnZhbHVlKTtcbiAgICB0b2RvQXBwLmFkZFByb2plY3QobmV3UHJvamVjdCk7XG4gICAgY29uc29sZS5sb2codG9kb0FwcCk7XG4gICAgY2xlYXJQcm9qZWN0cygpO1xuICAgIHJlbmRlclByb2plY3RzKCk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlbmRlclByb2plY3RzID0gKCkgPT4ge1xuICB0b2RvQXBwLnByb2plY3RzLmZvckVhY2goKHByb2plY3QsIHByb2plY3RJbmRleCkgPT4ge1xuICAgIGNvbnN0IHByb2plY3RMaW5lID0gY3JlYXRlSHRtbEVsZW1lbnQoXCJsaVwiLCBudWxsLCBudWxsKTtcbiAgICBjb25zdCBpY29uID0gY3JlYXRlSHRtbEVsZW1lbnQoXCJzcGFuXCIsIFwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiLCBcImxpc3RcIik7XG4gICAgY29uc3QgcHJvamVjdE5hbWUgPSBjcmVhdGVIdG1sRWxlbWVudChcInBcIiwgbnVsbCwgYCR7cHJvamVjdC5kZXNjcmlwdGlvbn1gKTtcbiAgICBjb25zdCBkZWxldGVCdG4gPSBjcmVhdGVIdG1sRWxlbWVudChcbiAgICAgIFwiYnV0dG9uXCIsXG4gICAgICBcIm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWRcIixcbiAgICAgIFwiZGVsZXRlXCIsXG4gICAgICBudWxsLFxuICAgICAgYCR7cHJvamVjdEluZGV4fWBcbiAgICApO1xuICAgIHByb2plY3RMaW5lLmFwcGVuZENoaWxkKGljb24pO1xuICAgIHByb2plY3RMaW5lLmFwcGVuZENoaWxkKHByb2plY3ROYW1lKTtcbiAgICBwcm9qZWN0TGluZS5hcHBlbmRDaGlsZChkZWxldGVCdG4pO1xuICAgIHByb2plY3RMaW5lLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICByZW5kZXJQcm9qZWN0VG9kb3MocHJvamVjdEluZGV4KTtcbiAgICB9KTtcbiAgICBkZWxldGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICByZW1vdmVQcm9qZWN0KGUpO1xuICAgICAgY2xlYXJUb2RvcygpO1xuICAgICAgcmVuZGVySW5ib3goKTtcbiAgICB9KTtcblxuICAgIHByb2plY3RzLmFwcGVuZENoaWxkKHByb2plY3RMaW5lKTtcbiAgfSk7XG59O1xuXG5jb25zdCByZW5kZXJQcm9qZWN0VG9kb3MgPSAocHJvamVjdEluZGV4KSA9PiB7XG4gIGNsZWFyVG9kb3MoKTtcbiAgdG9kb0FwcC5wcm9qZWN0c1twcm9qZWN0SW5kZXhdLnRvZG9MaXN0LmZvckVhY2goKGl0ZW0sIHRvZG9JbmRleCkgPT4ge1xuICAgIHJlbmRlclRvZG8oaXRlbSwgdG9kb0luZGV4LCBwcm9qZWN0SW5kZXgpO1xuICB9KTtcbiAgcmVuZGVyQWRkVG9kb0J1dHRvbihwcm9qZWN0SW5kZXgpO1xufTtcblxuY29uc3QgcmVtb3ZlUHJvamVjdCA9IChlKSA9PiB7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGNvbnNvbGUubG9nKFwieWVzXCIpO1xuICBjb25zdCB0b0RlbGV0ZSA9IGUudGFyZ2V0LmRhdGFzZXQucHJvamVjdEluZGV4O1xuICB0b2RvQXBwLnJlbW92ZVByb2plY3QodG9EZWxldGUpO1xuICBjbGVhclByb2plY3RzKCk7XG4gIHJlbmRlclByb2plY3RzKCk7XG4gIGNvbnNvbGUubG9nKHRvZG9BcHApO1xufTtcblxuY29uc3QgY2xlYXJQcm9qZWN0cyA9ICgpID0+IHtcbiAgcHJvamVjdHMuaW5uZXJIVE1MID0gXCJcIjtcbn07XG5cbmV4cG9ydCBjb25zdCByZW5kZXJJbmJveCA9ICgpID0+IHtcbiAgdG9kb0FwcC5wcm9qZWN0cy5mb3JFYWNoKChwcm9qZWN0LCBwcm9qZWN0SW5kZXgpID0+IHtcbiAgICBwcm9qZWN0LnRvZG9MaXN0LmZvckVhY2goKGl0ZW0sIHRvZG9pbmRleCkgPT4ge1xuICAgICAgcmVuZGVyVG9kbyhpdGVtLCB0b2RvaW5kZXgsIHByb2plY3RJbmRleCk7XG4gICAgfSk7XG4gIH0pO1xuICByZW5kZXJBZGRUb2RvQnV0dG9uKG51bGwpO1xufTtcblxuY29uc3QgcmVuZGVyQ29tcGxldGUgPSAoKSA9PiB7XG4gIHRvZG9BcHAucHJvamVjdHMuZm9yRWFjaCgocHJvamVjdCwgcHJvamVjdEluZGV4KSA9PiB7XG4gICAgY29uc3QgY29tcGxldGVkVG9kb3MgPSBwcm9qZWN0LnRvZG9MaXN0LmZpbHRlcihcbiAgICAgICh0b2RvKSA9PiB0b2RvLmlzQ29tcGxldGUgPT09IHRydWVcbiAgICApO1xuICAgIHNob3dDb21wbGV0ZSA9IHRydWU7XG4gICAgY29uc29sZS5sb2coY29tcGxldGVkVG9kb3MpO1xuICAgIGNvbXBsZXRlZFRvZG9zLmZvckVhY2goKGl0ZW0sIHRvZG9pbmRleCkgPT4ge1xuICAgICAgcmVuZGVyVG9kbyhpdGVtLCB0b2RvaW5kZXgsIHByb2plY3RJbmRleCk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuaW5ib3hCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgY2xlYXJUb2RvcygpO1xuICByZW5kZXJJbmJveCgpO1xufSk7XG5cbmNvbXBsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGNsZWFyVG9kb3MoKTtcbiAgcmVuZGVyQ29tcGxldGUoKTtcbn0pO1xuXG5hZGRQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBhZGRQcm9qZWN0KCkpO1xuIiwiaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gXCJkYXRlLWZuc1wiO1xuaW1wb3J0IHsgcmVuZGVySW5ib3gsIHJlbmRlclByb2plY3RzIH0gZnJvbSBcIi4vRE9NXCI7XG5cbi8qIGRhdGEgc3RydWN0dXJlcyBcbnRvZG9BcHBcbiovXG5cbmV4cG9ydCBjbGFzcyBUb2RvSXRlbSB7XG4gIGNvbnN0cnVjdG9yKGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcm9qZWN0KSB7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICB0aGlzLmlzQ29tcGxldGUgPSBmYWxzZTtcbiAgfVxuXG4gIGVkaXRUb2RvKG5ld0Rlc2NyaXB0aW9uLCBuZXdEdWVEYXRlKSB7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgIHRoaXMuZHVlRGF0ZSA9IG5ld0R1ZURhdGU7XG4gIH1cblxuICBjb21wbGV0ZVRvZG8oKSB7XG4gICAgdGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XG4gIH1cbn1cblxuLy9jb25uZWN0aW9uIGJldHdlZW4gcHJvamVjdCBhbmQgdG9kb2l0ZW0hIVxuXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XG4gIGNvbnN0cnVjdG9yKGRlc2NyaXB0aW9uKSB7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIHRoaXMudG9kb0xpc3QgPSBbXTtcbiAgfVxuXG4gIGVkaXRQcm9qZWN0KG5ld0Rlc2NyaXB0aW9uKSB7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICB9XG5cbiAgYWRkVG9kbyh0b2RvSXRlbSkge1xuICAgIHRoaXMudG9kb0xpc3QucHVzaCh0b2RvSXRlbSk7XG4gIH1cblxuICByZW1vdmVUb2RvKGluZGV4KSB7XG4gICAgdGhpcy50b2RvTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0b2RvQXBwID0ge1xuICBwcm9qZWN0czogW10sXG5cbiAgYWRkUHJvamVjdChwcm9qZWN0KSB7XG4gICAgdGhpcy5wcm9qZWN0cy5wdXNoKHByb2plY3QpO1xuICB9LFxuXG4gIHJlbW92ZVByb2plY3QoaW5kZXgpIHtcbiAgICBjb25zb2xlLmxvZyhpbmRleCk7XG4gICAgdGhpcy5wcm9qZWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9LFxufTtcblxuLy8gZGVtbyBwcm9qZWN0IGFuZCBpdGVtIGluIHRvZG9hcHBcblxuY29uc3QgZGVtb1Byb2plY3QgPSBuZXcgUHJvamVjdChcImRlbW9cIik7XG5jb25zdCBkZW1vUHJvamVjdDIgPSBuZXcgUHJvamVjdChcImRlbW8yXCIpO1xuXG5jb25zdCB0b0NsZWFuID0gbmV3IFRvZG9JdGVtKFwidG8gY2xlYW4gcm9vbVwiLCBcIjJwbVwiLCBcImRlbW9cIik7XG5jb25zdCB0b1J1biA9IG5ldyBUb2RvSXRlbShcInRvIHJ1blwiLCBcIjUuMDlcIik7XG5jb25zdCB0b0NsZWFuMiA9IG5ldyBUb2RvSXRlbShcInRvIGNsZWFuIHJvb21cIiwgXCIycG1cIiwgXCJkZW1vXCIpO1xuXG5kZW1vUHJvamVjdC5hZGRUb2RvKHRvQ2xlYW4pO1xuZGVtb1Byb2plY3QyLmFkZFRvZG8odG9DbGVhbjIpO1xuZGVtb1Byb2plY3QyLmFkZFRvZG8odG9SdW4pO1xuXG50b2RvQXBwLmFkZFByb2plY3QoZGVtb1Byb2plY3QpO1xudG9kb0FwcC5hZGRQcm9qZWN0KGRlbW9Qcm9qZWN0Mik7XG5cbnJlbmRlckluYm94KCk7XG5yZW5kZXJQcm9qZWN0cygpO1xuXG4vKiBcblRPRE9cblxuMy4xIGVkaXQgdG9kb3MgYW5kIHNldCB0b2RvcyBhcyBjb21wbGV0ZSwgZWRpdCBwcm9qZWN0c1xuNC4gd29yayB3aXRoIGRhdGVzIGFuZCB0b2RheS93ZWVrIGJ1dHRvbnMgLSBmaWx0ZXIgYXJyYXkgdGljdGFjdG9lXG4rc29ydCBmb3IgbGlzdGluZyAodXJnZW50cyBvbiB0aGUgdG9wKVxuNC4xLiBubyBwcm9qZWN0cyB3aXRoIHRoZSBzYW1lIG5hbWUgLSBlcnJvclxuXG42LiBjc3M6IGJ1cmdlciBmb3IgbW9iaWxlLCBtYXliZSB0cmFuc2l0aW9uP1xuNy4gYWRkIGxvY2Fsc3RvcmFnZVxuXG57dG9kb0FwcH1cbi0gW3Byb2plY3RzXVxuLSB0b0FkZCBwcm9qZWN0XG4tIHRvUmVtb3ZlIHByb2plY3RcbiEgLSBzaG93IGluYm94LCB0b2RheSwgbmV4dCA3IGRheXMgYW5kIGNvbXBsZXRlZFxuXG57cHJvamVjdH1cbi0gdGl0bGVcbi0gW3RvZG8gaXRlbXNdXG4tIHRvRWRpdCBwcm9qZWN0XG4tIHRvQWRkIHRvZG9cbi0gdG9SZW1vdmUgdG9kb1xuXG57dG9kbyBpdGVtfTpcbi0gZGVzY1xuLSBkdWVEYXRlXG4tIGlzQ29tcGxldGVcbi0gZGF0YS1rZXkgZm9yIGRvbSByZW1vdmUvZWRpdFxuLSB0b0VkaXQgKGluY2wgaXNDb21wbGV0ZSkgQU5EIGFiaWxpdHkgdG8gY2hhbmdlIHByb2plY3RzIGZyb20gdGhlIGxpc3RcblxucmVmIGh0dHBzOi8vYXJ0aXMtZGV2LmdpdGh1Yi5pby90by1kby1saXN0LyNcblxuICovXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwidG9kb3MiLCJwcm9qZWN0cyIsImluYm94QnRuIiwiY29tcGxldGVCdG4iLCJhZGRQcm9qZWN0QnRuIiwic2hvd0NvbXBsZXRlIiwiY3JlYXRlSHRtbEVsZW1lbnQiLCJ0YWciLCJodG1sQ2xhc3MiLCJ0ZXh0Q29udGVudCIsInR5cGUiLCJwcm9qZWN0SW5kZXgiLCJ0b2RvSW5kZXgiLCJodG1sRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImRhdGFzZXQiLCJyZW5kZXJUb2RvIiwiaXRlbUxpbmUiLCJjaGVjayIsImRlc2NQIiwiZGVzY3JpcHRpb24iLCJkYXRlUCIsImR1ZURhdGUiLCJlZGl0QnRuIiwiZGVsZXRlQnRuIiwiaXNDb21wbGV0ZSIsImNoZWNrZWQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVuZGVyQ29tcGxldGUiLCJzdG9wUHJvcGFnYXRpb24iLCJjb25zb2xlIiwibG9nIiwiaW5wdXRUb2RvIiwidG9kb0FwcCIsInJlbW92ZVRvZG8iLCJjbGVhclRvZG9zIiwicmVuZGVySW5ib3giLCJyZW5kZXJBZGRUb2RvQnV0dG9uIiwiYWRkVG9kbyIsImxhc3RDaGlsZCIsInRvZG9JbnB1dEZvcm0iLCJpbnB1dERlc2NyaXB0aW9uIiwiaW5wdXREdWVkYXRlIiwic2VsZWN0Iiwic3VibWl0QnRuIiwiY2FuY2VsQnRuIiwicmVxdWlyZWQiLCJjdXJyZW50UHJvamVjdEluZGV4IiwiY3VycmVudFRvZG8iLCJ0b2RvTGlzdCIsInZhbHVlIiwicHJldmVudERlZmF1bHQiLCJlZGl0VG9kbyIsInJlbmRlclByb2plY3RUb2RvcyIsImZvckVhY2giLCJwcm9qZWN0IiwicHJvamVjdE9wdGlvbiIsImZpbmRJbmRleCIsInRvZG9JdGVtIiwiVG9kb0l0ZW0iLCJpbm5lckhUTUwiLCJyZW5kZXJQcm9qZWN0cyIsInByb2plY3RMaW5lIiwiaWNvbiIsInByb2plY3ROYW1lIiwicmVtb3ZlUHJvamVjdCIsInRvRGVsZXRlIiwiY2xlYXJQcm9qZWN0cyIsInRvZG9pbmRleCIsImNvbXBsZXRlZFRvZG9zIiwiZmlsdGVyIiwidG9kbyIsInByb2plY3RJbnB1dEZvcm0iLCJwcm9qZWN0RGVzY3JpcHRpb24iLCJuZXdQcm9qZWN0IiwiUHJvamVjdCIsImFkZFByb2plY3QiLCJjb25zdHJ1Y3RvciIsIm5ld0Rlc2NyaXB0aW9uIiwibmV3RHVlRGF0ZSIsImNvbXBsZXRlVG9kbyIsImVkaXRQcm9qZWN0IiwiZGVtb1Byb2plY3QiLCJkZW1vUHJvamVjdDIiLCJ0b0NsZWFuIiwidG9SdW4iLCJ0b0NsZWFuMiJdLCJzb3VyY2VSb290IjoiIn0=